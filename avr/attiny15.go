// Automatically generated file. DO NOT EDIT.
// Generated by gen-device-avr.go from ATtiny15.atdf, see http://packs.download.atmel.com/

// +build avr,attiny15

// Device information for the ATtiny15.
package avr

import (
	"runtime/interrupt"
	"runtime/volatile"
	"unsafe"
)

// Some information about this device.
const (
	DEVICE = "ATtiny15"
	ARCH   = "AVR8"
	FAMILY = "tinyAVR"
)

// Interrupts
const (
	IRQ_RESET       = 0 // External Reset, Power-on Reset and Watchdog Reset
	IRQ_INT0        = 1 // External Interrupt 0
	IRQ_IO_PINS     = 2 // External Interrupt Request 0
	IRQ_TIMER1_COMP = 3 // Timer/Counter1 Compare Match
	IRQ_TIMER1_OVF  = 4 // Timer/Counter1 Overflow
	IRQ_TIMER0_OVF  = 5 // Timer/Counter0 Overflow
	IRQ_EE_RDY      = 6 // EEPROM Ready
	IRQ_ANA_COMP    = 7 // Analog Comparator
	IRQ_ADC         = 8 // ADC Conversion Ready
	IRQ_max         = 8 // Highest interrupt number on this device.
)

// Map interrupt numbers to function names.
// These aren't real calls, they're removed by the compiler.
var (
	_ = interrupt.Register(IRQ_RESET, "__vector_RESET")
	_ = interrupt.Register(IRQ_INT0, "__vector_INT0")
	_ = interrupt.Register(IRQ_IO_PINS, "__vector_IO_PINS")
	_ = interrupt.Register(IRQ_TIMER1_COMP, "__vector_TIMER1_COMP")
	_ = interrupt.Register(IRQ_TIMER1_OVF, "__vector_TIMER1_OVF")
	_ = interrupt.Register(IRQ_TIMER0_OVF, "__vector_TIMER0_OVF")
	_ = interrupt.Register(IRQ_EE_RDY, "__vector_EE_RDY")
	_ = interrupt.Register(IRQ_ANA_COMP, "__vector_ANA_COMP")
	_ = interrupt.Register(IRQ_ADC, "__vector_ADC")
)

// Peripherals.
var (
	// Fuses
	LOW = (*volatile.Register8)(unsafe.Pointer(uintptr(0x0)))

	// Lockbits
	LOCKBIT = (*volatile.Register8)(unsafe.Pointer(uintptr(0x0)))

	// Analog-to-Digital Converter
	ADMUX = (*volatile.Register8)(unsafe.Pointer(uintptr(0x7)))
	ADCSR = (*volatile.Register8)(unsafe.Pointer(uintptr(0x6)))
	ADCL  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x4)))
	ADCH  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x5)))

	// Analog Comparator
	ACSR = (*volatile.Register8)(unsafe.Pointer(uintptr(0x8)))

	// EEPROM
	EEAR = (*volatile.Register8)(unsafe.Pointer(uintptr(0x1e)))
	EEDR = (*volatile.Register8)(unsafe.Pointer(uintptr(0x1d)))
	EECR = (*volatile.Register8)(unsafe.Pointer(uintptr(0x1c)))

	// I/O Port
	PORTB = (*volatile.Register8)(unsafe.Pointer(uintptr(0x18)))
	DDRB  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x17)))
	PINB  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x16)))

	// Timer/Counter, 8-bit
	TCCR0 = (*volatile.Register8)(unsafe.Pointer(uintptr(0x33)))
	TCNT0 = (*volatile.Register8)(unsafe.Pointer(uintptr(0x32)))
	TCCR1 = (*volatile.Register8)(unsafe.Pointer(uintptr(0x30)))
	TCNT1 = (*volatile.Register8)(unsafe.Pointer(uintptr(0x2f)))
	OCR1A = (*volatile.Register8)(unsafe.Pointer(uintptr(0x2e)))
	OCR1B = (*volatile.Register8)(unsafe.Pointer(uintptr(0x2d)))
	SFIOR = (*volatile.Register8)(unsafe.Pointer(uintptr(0x2c)))

	// Watchdog Timer
	WDTCR = (*volatile.Register8)(unsafe.Pointer(uintptr(0x21)))

	// CPU Registers
	SREG   = (*volatile.Register8)(unsafe.Pointer(uintptr(0x3f)))
	MCUCR  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x35)))
	MCUSR  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x34)))
	OSCCAL = (*volatile.Register8)(unsafe.Pointer(uintptr(0x31)))

	// External Interrupts
	GIMSK = (*volatile.Register8)(unsafe.Pointer(uintptr(0x3b)))
	GIFR  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x3a)))
)

// Bitfields for FUSE: Fuses
const (
	// LOW
	LOW_BODLEVEL = 0x80 // Brown-out Detection Level
	LOW_BODEN    = 0x40 // Brown-out detection enabled
	LOW_SPIEN    = 0x20 // Serial program downloading (SPI) enabled
	LOW_RSTDISBL = 0x10 // External reset function of PB5 disabled
	LOW_CKSEL0   = 0x1  // Clock Select
	LOW_CKSEL1   = 0x2  // Clock Select
)

// Bitfields for LOCKBIT: Lockbits
const (
	// LOCKBIT
	LOCKBIT_LB0 = 0x2 // Memory Lock
	LOCKBIT_LB1 = 0x4 // Memory Lock
)

// Bitfields for ADC: Analog-to-Digital Converter
const (
	// ADMUX: The ADC multiplexer Selection Register
	ADMUX_REFS0 = 0x40 // Reference Selection Bits
	ADMUX_REFS1 = 0x80 // Reference Selection Bits
	ADMUX_ADLAR = 0x20 // Left Adjust Result
	ADMUX_MUX0  = 0x1  // Analog Channel and Gain Selection Bits
	ADMUX_MUX1  = 0x2  // Analog Channel and Gain Selection Bits
	ADMUX_MUX2  = 0x4  // Analog Channel and Gain Selection Bits

	// ADCSR: The ADC Control and Status register
	ADCSR_ADEN  = 0x80 // ADC Enable
	ADCSR_ADSC  = 0x40 // ADC Start Conversion
	ADCSR_ADFR  = 0x20 // ADC  Free Running Select
	ADCSR_ADIF  = 0x10 // ADC Interrupt Flag
	ADCSR_ADIE  = 0x8  // ADC Interrupt Enable
	ADCSR_ADPS0 = 0x1  // ADC  Prescaler Select Bits
	ADCSR_ADPS1 = 0x2  // ADC  Prescaler Select Bits
	ADCSR_ADPS2 = 0x4  // ADC  Prescaler Select Bits
)

// Bitfields for AC: Analog Comparator
const (
	// ACSR: Analog Comparator Control And Status Register
	ACSR_ACD   = 0x80 // Analog Comparator Disable
	ACSR_ACBG  = 0x40 // Analog Comparator Bandgap Select
	ACSR_ACO   = 0x20 // Analog Compare Output
	ACSR_ACI   = 0x10 // Analog Comparator Interrupt Flag
	ACSR_ACIE  = 0x8  // Analog Comparator Interrupt Enable
	ACSR_ACIS0 = 0x1  // Analog Comparator Interrupt Mode Select bits
	ACSR_ACIS1 = 0x2  // Analog Comparator Interrupt Mode Select bits
)

// Bitfields for EEPROM: EEPROM
const (
	// EECR: EEPROM Control Register
	EECR_EERIE = 0x8 // EEProm Ready Interrupt Enable
	EECR_EEMWE = 0x4 // EEPROM Master Write Enable
	EECR_EEWE  = 0x2 // EEPROM Write Enable
	EECR_EERE  = 0x1 // EEPROM Read Enable
)

// Bitfields for TC8: Timer/Counter, 8-bit
const (
	// TCCR0: Timer/Counter0 Control Register
	TCCR0_CS02 = 0x4 // Clock Select0 bit 2
	TCCR0_CS01 = 0x2 // Clock Select0 bit 1
	TCCR0_CS00 = 0x1 // Clock Select0 bit 0

	// TCCR1: Timer/Counter Control Register
	TCCR1_CTC1   = 0x80 // Clear Timer/Counter on Compare Match
	TCCR1_PWM1   = 0x40 // Pulse Width Modulator Enable
	TCCR1_COM1A0 = 0x10 // Compare Output Mode, Bits
	TCCR1_COM1A1 = 0x20 // Compare Output Mode, Bits
	TCCR1_CS10   = 0x1  // Clock Select Bits
	TCCR1_CS11   = 0x2  // Clock Select Bits
	TCCR1_CS12   = 0x4  // Clock Select Bits
	TCCR1_CS13   = 0x8  // Clock Select Bits

	// SFIOR: Special Function IO Register
	SFIOR_FOC1A = 0x4 // Force Output Compare 1A
	SFIOR_PSR1  = 0x2 // Prescaler Reset Timer/Counter1
	SFIOR_PSR0  = 0x1 // Prescaler Reset Timer/Counter0
)

// Bitfields for WDT: Watchdog Timer
const (
	// WDTCR: Watchdog Timer Control Register
	WDTCR_WDTOE = 0x10 // RW
	WDTCR_WDE   = 0x8  // Watch Dog Enable
	WDTCR_WDP0  = 0x1  // Watch Dog Timer Prescaler bits
	WDTCR_WDP1  = 0x2  // Watch Dog Timer Prescaler bits
	WDTCR_WDP2  = 0x4  // Watch Dog Timer Prescaler bits
)

// Bitfields for CPU: CPU Registers
const (
	// SREG: Status Register
	SREG_I = 0x80 // Global Interrupt Enable
	SREG_T = 0x40 // Bit Copy Storage
	SREG_H = 0x20 // Half Carry Flag
	SREG_S = 0x10 // Sign Bit
	SREG_V = 0x8  // Two's Complement Overflow Flag
	SREG_N = 0x4  // Negative Flag
	SREG_Z = 0x2  // Zero Flag
	SREG_C = 0x1  // Carry Flag

	// MCUCR: MCU Control Register
	MCUCR_PUD   = 0x40 // Pull-up Disable
	MCUCR_SE    = 0x20 // Sleep Enable
	MCUCR_SM0   = 0x8  // Sleep Mode Select Bits
	MCUCR_SM1   = 0x10 // Sleep Mode Select Bits
	MCUCR_ISC00 = 0x1  // Interrupt Sense Control 0 bits
	MCUCR_ISC01 = 0x2  // Interrupt Sense Control 0 bits

	// MCUSR: MCU Status register
	MCUSR_WDRF  = 0x8 // Watchdog Reset Flag
	MCUSR_BORF  = 0x4 // Brown-out Reset Flag
	MCUSR_EXTRF = 0x2 // External Reset Flag
	MCUSR_PORF  = 0x1 // Power-On Reset Flag

	// OSCCAL: Status Register
	OSCCAL_OSCCAL0 = 0x1  // Oscillator Calibration
	OSCCAL_OSCCAL1 = 0x2  // Oscillator Calibration
	OSCCAL_OSCCAL2 = 0x4  // Oscillator Calibration
	OSCCAL_OSCCAL3 = 0x8  // Oscillator Calibration
	OSCCAL_OSCCAL4 = 0x10 // Oscillator Calibration
	OSCCAL_OSCCAL5 = 0x20 // Oscillator Calibration
	OSCCAL_OSCCAL6 = 0x40 // Oscillator Calibration
	OSCCAL_OSCCAL7 = 0x80 // Oscillator Calibration
)

// Bitfields for EXINT: External Interrupts
const (
	// GIMSK: General Interrupt Mask Register
	GIMSK_INT0 = 0x40 // External Interrupt Request 0 Enable
	GIMSK_PCIE = 0x20 // Pin Change Interrupt Enable

	// GIFR: General Interrupt Flag register
	GIFR_INTF0 = 0x40 // External Interrupt Flag 0
	GIFR_PCIF  = 0x20 // Pin Change Interrupt Flag
)
